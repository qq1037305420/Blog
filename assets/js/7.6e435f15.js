(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{210:function(r,e,t){"use strict";t.r(e);var a=t(0),n=Object(a.a)({},(function(){var r=this,e=r.$createElement,t=r._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":r.$parent.slotKey}},[t("h1",{attrs:{id:"树型结构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#树型结构","aria-hidden":"true"}},[r._v("#")]),r._v(" 树型结构")]),r._v(" "),t("h2",{attrs:{id:"平级数据变成树-flat2tree"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#平级数据变成树-flat2tree","aria-hidden":"true"}},[r._v("#")]),r._v(" 平级数据变成树 flat2tree")]),r._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[r._v('function flat2tree( allData, id = "id", pid = "parentId", children = "children", rootId = "") {\n  let treeMapList = allData.reduce((memo, current) => {\n    memo[current[id]] = current;\n    return memo;\n  }, {});\n  return allData.reduce((arr, current) => {\n    let parentId = current[pid];\n    let parent = treeMapList[parentId];\n    if (parentId == rootId) {\n    arr.push(current);\n    } else if (parent) {\n        parent[children]\n        ? parent[children].push(current)\n        : (parent[children] = [current]);\n    }  \n        return arr;\n  }, []);\n}\n')])])]),t("h2",{attrs:{id:"树形结构转平行结构-tree2flat"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#树形结构转平行结构-tree2flat","aria-hidden":"true"}},[r._v("#")]),r._v(" 树形结构转平行结构 tree2flat")]),r._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[r._v("function tree2flat(children: any, childrenKey: string): any {\n    var arr: any[] = []\n    for (var i = 0; i < children.length; i++) {\n        arr.push(children[i])\n        if (_.get(children[i], [childrenKey])) arr = arr.concat(tree2flat(children[i][childrenKey], childrenKey))\n    }\n    return arr\n}\n")])])])])}),[],!1,null,null,null);e.default=n.exports}}]);